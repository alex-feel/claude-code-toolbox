name: Test & Coverage

on:
  pull_request:
    paths:
      - 'scripts/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/test.yml'
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

jobs:
  test:
    name: Test Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']

    steps:
      - name: Skip release-please PRs
        if: ${{ startsWith(github.head_ref, 'release-please--branches--') }}
        run: echo "Skipping tests for release-please PR"

      - name: Checkout code
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"

      - name: Install dependencies
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        run: uv sync --all-extras --dev

      - name: Run pytest with coverage
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        run: uv run pytest -v --cov=scripts --cov-report=term-missing --cov-report=xml --cov-report=html --junit-xml=test-results.xml tests/

      - name: Upload test results
        if: always() && ! startsWith(github.head_ref, 'release-please--branches--')
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: test-results.xml

      - name: Upload coverage reports
        if: matrix.os == 'ubuntu-latest' && ! startsWith(github.head_ref, 'release-please--branches--')
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/

      - name: Surface test results
        if: always() && ! startsWith(github.head_ref, 'release-please--branches--')
        uses: pmeier/pytest-results-action@main
        with:
          path: test-results.xml
          summary: true
          display-options: fEX
          fail-on-empty: true

      - name: Coverage comment
        if: github.event_name == 'pull_request' && matrix.os == 'ubuntu-latest' && ! startsWith(github.head_ref, 'release-please--branches--')
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MINIMUM_GREEN: 80
          MINIMUM_ORANGE: 60

  test-validation:
    name: Test Environment Validation
    if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        run: uv sync

      - name: Validate all environment configs
        run: |
          uv run python scripts/validate_environment_config.py environments/library/

      - name: Test entity counting
        run: |
          uv run python scripts/count_entities.py

  test-install-scripts:
    name: Test Install Scripts
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Skip release-please PRs
        if: ${{ startsWith(github.head_ref, 'release-please--branches--') }}
        run: echo "Skipping tests for release-please PR"

      - name: Checkout code
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        uses: actions/checkout@v4

      - name: Set up Python
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install uv
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        uses: astral-sh/setup-uv@v4

      - name: Install dependencies
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        run: uv sync

      - name: Test setup_environment.py imports
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        run: |
          uv run python -c "import sys; sys.path.insert(0, 'scripts'); import setup_environment"

      - name: Test install_claude.py imports
        if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
        run: |
          uv run python -c "import sys; sys.path.insert(0, 'scripts'); import install_claude"

      - name: Test setup with dry run (Unix)
        if: runner.os != 'Windows' && ! startsWith(github.head_ref, 'release-please--branches--')
        run: |
          uv run python scripts/setup_environment.py python --skip-install || true

      - name: Test setup with dry run (Windows)
        if: runner.os == 'Windows' && ! startsWith(github.head_ref, 'release-please--branches--')
        run: |
          uv run python scripts/setup_environment.py python --skip-install
        continue-on-error: true

  summary:
    name: Test Summary
    if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
    runs-on: ubuntu-latest
    needs: [test, test-validation, test-install-scripts]

    steps:
      - name: Summary
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ All tests completed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Matrix" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Ubuntu + Python 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Windows + Python 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ macOS + Python 3.12" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Validation Tests" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Environment configurations validated" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Entity counting tested" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Install scripts tested" >> $GITHUB_STEP_SUMMARY
