name: Validate Environment Configs

on:
  pull_request:
    paths:
      - 'environments/examples/**/*.yaml'
      - 'environments/examples/**/*.yml'
      - 'environments/templates/**/*.yaml'
      - 'environments/templates/**/*.yml'
      - 'scripts/validate_environment_config.py'
      - 'scripts/models/environment_config.py'
      - '.github/workflows/validate-configs.yml'

jobs:
  validate-pr:
    name: Validate Environment Configurations
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for diff

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pydantic

      - name: Get changed config files
        id: changed-files
        run: |
          # Get list of changed YAML files in environments/
          git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E 'environments/.+\.(yaml|yml)$' > changed-configs.txt || true

          if [ -s changed-configs.txt ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changed configuration files:"
            cat changed-configs.txt
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No configuration files changed"
          fi

      - name: Validate changed configurations
        if: steps.changed-files.outputs.has_changes == 'true'
        run: |
          echo "Validating changed configuration files..."
          exit_code=0
          while IFS= read -r config_file; do
            if [ -f "$config_file" ]; then
              echo "----------------------------------------"
              echo "Validating: $config_file"

              # Check if it's a template or example
              if [[ "$config_file" == *"templates/"* ]]; then
                echo "Note: Template file - allowing placeholder values"
                python scripts/validate_environment_config.py "$config_file" || true
              else
                # Examples must pass strict validation
                if ! python scripts/validate_environment_config.py "$config_file" --strict; then
                  exit_code=1
                fi
              fi
            fi
          done < changed-configs.txt

          if [ $exit_code -ne 0 ]; then
            echo "----------------------------------------"
            echo "❌ Validation failed for one or more configuration files"
            exit $exit_code
          else
            echo "----------------------------------------"
            echo "✅ All configuration files validated successfully"
          fi

      - name: Comment PR with validation success
        if: success() && steps.changed-files.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ✅ Configuration Validation Passed

            All environment configuration files have been validated successfully.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment PR with validation failure
        if: failure() && steps.changed-files.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ Configuration Validation Failed

            One or more environment configuration files have validation errors.
            Please check the workflow logs for details.

            **Note:** Template files in \`environments/templates/\` are allowed to have placeholder values.
            Example files in \`environments/examples/\` must be fully valid.

            To validate locally, run:
            \`\`\`bash
            python scripts/validate_environment_config.py <config-file> --strict
            \`\`\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
