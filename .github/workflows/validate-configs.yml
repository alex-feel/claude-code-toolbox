name: Validate Environment Configs

on:
  pull_request:
    # Remove path filters to ensure workflow always runs

permissions:
  contents: read
  pull-requests: write

jobs:
  validate:
    name: Validate Environment Configurations
    if: ${{ ! startsWith(github.head_ref, 'release-please--branches--') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for diff

      - name: Check for relevant changes
        id: check-changes
        run: |
          # Check if any environment config files were changed
          git diff --name-only origin/${{ github.base_ref }}..HEAD > all-changes.txt

          # Filter for environment config files (YAML only, not Python model files)
          grep -E 'environments/.+\.(yaml|yml)$' all-changes.txt > changed-configs.txt || true

          if [ -s changed-configs.txt ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Environment configuration files were changed:"
            cat changed-configs.txt
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No environment configuration files were changed - skipping validation"
          fi

      - name: Set up Python
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install uv
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: astral-sh/setup-uv@v6

      - name: Install dependencies
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          uv venv
          uv pip install pyyaml pydantic

      - name: Validate changed configurations
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          echo "Validating changed configuration files..."
          exit_code=0
          while IFS= read -r config_file; do
            if [ -f "$config_file" ]; then
              echo "----------------------------------------"
              echo "Validating: $config_file"

              # Check if it's a template or library config
              if [[ "$config_file" == *"templates/"* ]]; then
                echo "Note: Template file - allowing placeholder values"
                python scripts/validate_environment_config.py "$config_file" || true
              else
                # Library configs must pass strict validation
                if ! python scripts/validate_environment_config.py "$config_file" --strict; then
                  exit_code=1
                fi
              fi
            fi
          done < changed-configs.txt

          if [ $exit_code -ne 0 ]; then
            echo "----------------------------------------"
            echo "❌ Validation failed for one or more configuration files"
            exit $exit_code
          else
            echo "----------------------------------------"
            echo "✅ All configuration files validated successfully"
          fi

      - name: Skip validation message
        if: steps.check-changes.outputs.has_changes == 'false'
        run: |
          echo "✅ No environment configuration changes to validate"

      - name: Comment PR with validation success
        if: success() && steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ✅ Configuration Validation Passed

            All environment configuration files have been validated successfully.`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Comment PR with validation failure
        if: failure() && steps.check-changes.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ Configuration Validation Failed

            One or more environment configuration files have validation errors.
            Please check the workflow logs for details.

            **Note:** Template files in \`environments/templates/\` are allowed to have placeholder values.
            Configuration files in \`environments/library/\` must be fully valid.

            To validate locally, run:
            \`\`\`bash
            python scripts/validate_environment_config.py <config-file> --strict
            \`\`\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
