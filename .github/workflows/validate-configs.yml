name: Validate Environment Configs

on:
  pull_request:
    paths:
      - 'environments/examples/**/*.yaml'
      - 'environments/examples/**/*.yml'
      - 'environments/templates/**/*.yaml'
      - 'environments/templates/**/*.yml'
      - 'scripts/validate_environment_config.py'
      - 'scripts/models/environment_config.py'
      - '.github/workflows/validate-configs.yml'
  push:
    branches:
      - main
    paths:
      - 'environments/examples/**/*.yaml'
      - 'environments/examples/**/*.yml'
      - 'environments/templates/**/*.yaml'
      - 'environments/templates/**/*.yml'
      - 'scripts/validate_environment_config.py'
      - 'scripts/models/environment_config.py'

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pydantic

      - name: Validate example configurations
        run: |
          echo "Validating example configurations..."
          python scripts/validate_environment_config.py environments/examples/ --strict

      - name: Validate template configurations
        run: |
          echo "Validating template configurations..."
          # Templates might have placeholder values, so we don't use --strict
          python scripts/validate_environment_config.py environments/templates/ || true

      - name: Test single file validation
        run: |
          echo "Testing single file validation..."
          # Test with the python.yaml example if it exists
          if [ -f "environments/examples/python.yaml" ]; then
            python scripts/validate_environment_config.py environments/examples/python.yaml --strict
          fi

      - name: Generate validation report (JSON)
        if: always()
        run: |
          echo "Generating JSON validation report..."
          python scripts/validate_environment_config.py environments/examples/ --json > validation-report.json
          cat validation-report.json

      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report-py312
          path: validation-report.json

  validate-pr-configs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get full history for diff

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml pydantic

      - name: Get changed config files
        id: changed-files
        run: |
          # Get list of changed YAML files in environments/
          git diff --name-only origin/${{ github.base_ref }}..HEAD | grep -E 'environments/.+\.(yaml|yml)$' > changed-configs.txt || true

          if [ -s changed-configs.txt ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Changed configuration files:"
            cat changed-configs.txt
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No configuration files changed"
          fi

      - name: Validate changed configurations
        if: steps.changed-files.outputs.has_changes == 'true'
        run: |
          echo "Validating changed configuration files..."
          while IFS= read -r config_file; do
            if [ -f "$config_file" ]; then
              echo "Validating: $config_file"
              python scripts/validate_environment_config.py "$config_file" --strict
            fi
          done < changed-configs.txt

      - name: Comment PR with validation results
        if: failure() && steps.changed-files.outputs.has_changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## ❌ Configuration Validation Failed

            One or more environment configuration files have validation errors.
            Please check the workflow logs for details.

            To validate locally, run:
            \`\`\`bash
            python scripts/validate_environment_config.py <config-file>
            \`\`\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
